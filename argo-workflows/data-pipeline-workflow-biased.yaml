apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: data-pipeline-  # Argo will append a random suffix to the workflow name
spec:
  entrypoint: data-pipeline-dag
  arguments:
    parameters:
      # Input/output buckets and file naming conventions
      - name: input-bucket
        value: "raw-data"
      - name: input-key
        value: "sample_data.csv"
      - name: processed-bucket
        value: "processed-data"
      - name: reports-bucket
        value: "reports"
      - name: feature-bucket
        value: "feature-store"
      - name: processed-key-suffix
        value: "-processed.parquet"
      - name: bias-report-key-suffix
        value: "-bias-report.json"
      - name: reduction-bias-report-key-suffix
        value: "-reduction-bias-report.json"
      - name: train-key-suffix
        value: "-train.parquet"
      - name: test-key-suffix
        value: "-test.parquet"
      - name: val-key-suffix
        value: "-val.parquet"

      # Parameters used for bias detection and data splitting
      - name: target-column
        value: "target"
      - name: sensitive-features
        value: "sensitive_attr"
      - name: group-value
        value: "groupA"
      - name: positive-target-value
        value: "1"
      - name: bias-threshold
        value: "0.1"

  templates:

    # Step 1: Validate input data
    - name: validate-data
      inputs:
        parameters:
          - name: bucket
          - name: key
      container:
        image: step-validation:latest
        imagePullPolicy: Never
        command: [python, /app/validate-dummy.py]
        args: [ "--bucket", "{{inputs.parameters.bucket}}", "--key", "{{inputs.parameters.key}}" ]
        env:
          - name: S3_ENDPOINT_URL
            value: "http://minio-service.argo.svc.cluster.local:9000"
          - name: AWS_ACCESS_KEY_ID
            valueFrom: { secretKeyRef: { name: minio-secrets, key: rootUser } }
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom: { secretKeyRef: { name: minio-secrets, key: rootPassword } }

    # Step 2: Preprocess raw input data and save it in a structured format
    - name: preprocess-data
      inputs:
        parameters:
          - name: in_bucket
          - name: in_key
          - name: out_bucket
          - name: out_key
      container:
        image: step-preprocess:latest
        imagePullPolicy: Never
        command: [python, /app/preprocess-dummy.py]
        args:
          [ "--in_bucket", "{{inputs.parameters.in_bucket}}",
            "--in_key", "{{inputs.parameters.in_key}}",
            "--out_bucket", "{{inputs.parameters.out_bucket}}",
            "--out_key", "{{inputs.parameters.out_key}}" ]
        env:
          - name: S3_ENDPOINT_URL
            value: "http://minio-service.argo.svc.cluster.local:9000"
          - name: AWS_ACCESS_KEY_ID
            valueFrom: { secretKeyRef: { name: minio-secrets, key: rootUser } }
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom: { secretKeyRef: { name: minio-secrets, key: rootPassword } }

    # Step 3: Analyze dataset for bias and generate a report
    - name: check-bias 
      inputs:
        parameters:
          - name: p_in_bucket
          - name: p_in_key
          - name: p_out_bucket         
          - name: p_report_key         
          - name: p_sensitive_col
          - name: p_group_value
          - name: p_target_col
          - name: p_positive_target_value
          - name: p_bias_threshold
      outputs:
        parameters:
          - name: bias-status
            valueFrom:
              path: /tmp/bias_status.txt
      container:
        image: step-bias-check:latest
        imagePullPolicy: Never
        command: [python, /app/check-bias-b.py]
        args: [
          "--in_bucket={{inputs.parameters.p_in_bucket}}",
          "--in_key={{inputs.parameters.p_in_key}}",
          "--out_bucket={{inputs.parameters.p_out_bucket}}",
          "--report_key={{inputs.parameters.p_report_key}}",
          "--sensitive_features={{inputs.parameters.p_sensitive_col}}",
          "--group_value={{inputs.parameters.p_group_value}}",
          "--target_col={{inputs.parameters.p_target_col}}",
          "--positive_target_value={{inputs.parameters.p_positive_target_value}}",
          "--bias_threshold={{inputs.parameters.p_bias_threshold}}"
        ]
        env:
          - name: S3_ENDPOINT_URL
            value: "http://minio-service.argo.svc.cluster.local:9000"
          - name: AWS_ACCESS_KEY_ID
            valueFrom: { secretKeyRef: { name: minio-secrets, key: rootUser } }
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom: { secretKeyRef: { name: minio-secrets, key: rootPassword } }

    # Step 4: Apply bias mitigation via oversampling (if needed)
    - name: reduction-bias
      inputs:
        parameters:
          - name: p_in_bucket
          - name: p_in_key
          - name: p_out_bucket
          - name: p_out_key
          - name: p_sensitive_col
          - name: p_target_col
      container:
        image: step-bias-reduction:latest
        imagePullPolicy: Never
        command: [python, /app/bias-reduction.py]
        args: [
          "--input-bucket", "{{inputs.parameters.p_in_bucket}}",
          "--input-key", "{{inputs.parameters.p_in_key}}",
          "--output-bucket", "{{inputs.parameters.p_out_bucket}}",
          "--output-key", "{{inputs.parameters.p_out_key}}",
          "--sensitive-col", "{{inputs.parameters.p_sensitive_col}}",
          "--target-col", "{{inputs.parameters.p_target_col}}"
        ]
        env:
          - name: S3_ENDPOINT_URL
            value: "http://minio-service.argo.svc.cluster.local:9000"
          - name: AWS_ACCESS_KEY_ID
            valueFrom: { secretKeyRef: { name: minio-secrets, key: rootUser } }
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom: { secretKeyRef: { name: minio-secrets, key: rootPassword } }



    # Step 6: Split the dataset into train/test/validation sets
    - name: split-data
      inputs:
        parameters:
          - name: in_bucket
          - name: in_key
          - name: out_bucket
          - name: train_key
          - name: test_key
          - name: val_key
          - name: target_col
      container:
        image: step-split-data:latest
        imagePullPolicy: Never
        command: [python, /app/split_data.py]
        args: [
          "--in_bucket={{inputs.parameters.in_bucket}}",
          "--in_key={{inputs.parameters.in_key}}",
          "--out_bucket={{inputs.parameters.out_bucket}}",
          "--train_key={{inputs.parameters.train_key}}",
          "--test_key={{inputs.parameters.test_key}}",
          "--val_key={{inputs.parameters.val_key}}",
          "--target_col={{inputs.parameters.target_col}}"
        ]
        env:
          - name: S3_ENDPOINT_URL
            value: "http://minio-service.argo.svc.cluster.local:9000"
          - name: AWS_ACCESS_KEY_ID
            valueFrom: { secretKeyRef: { name: minio-secrets, key: rootUser } }
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom: { secretKeyRef: { name: minio-secrets, key: rootPassword } }

    # DAG: Define the full pipeline and task dependencies
    - name: data-pipeline-dag
      dag:
        tasks:
          - name: validate
            template: validate-data
            arguments:
              parameters:
                - name: bucket
                  value: "{{workflow.parameters.input-bucket}}"
                - name: key
                  value: "{{workflow.parameters.input-key}}"

          - name: preprocess
            template: preprocess-data
            dependencies: [validate]
            arguments:
              parameters:
                - name: in_bucket
                  value: "{{workflow.parameters.input-bucket}}"
                - name: in_key
                  value: "{{workflow.parameters.input-key}}"
                - name: out_bucket
                  value: "{{workflow.parameters.processed-bucket}}"
                - name: out_key
                  value: "{{workflow.parameters.input-key}}{{workflow.parameters.processed-key-suffix}}"

          - name: initial-bias-check
            template: check-bias
            dependencies: [preprocess]
            arguments:
              parameters:
                - name: p_in_bucket
                  value: "{{workflow.parameters.processed-bucket}}"
                - name: p_in_key
                  value: "{{workflow.parameters.input-key}}{{workflow.parameters.processed-key-suffix}}"
                - name: p_out_bucket
                  value: "{{workflow.parameters.reports-bucket}}"
                - name: p_report_key
                  value: "{{workflow.parameters.input-key}}{{workflow.parameters.bias-report-key-suffix}}"
                - name: p_sensitive_col
                  value: "{{workflow.parameters.sensitive-features}}"
                - name: p_group_value
                  value: "{{workflow.parameters.group-value}}"
                - name: p_target_col
                  value: "{{workflow.parameters.target-column}}"
                - name: p_positive_target_value
                  value: "{{workflow.parameters.positive-target-value}}"
                - name: p_bias_threshold
                  value: "{{workflow.parameters.bias-threshold}}"

          - name: reduction
            template: reduction-bias
            dependencies: [initial-bias-check]
            when: "{{tasks.initial-bias-check.outputs.parameters.bias-status}} != 'Passed'"
            arguments:
              parameters:
                - name: p_in_bucket
                  value: "{{workflow.parameters.processed-bucket}}"
                - name: p_in_key
                  value: "{{workflow.parameters.input-key}}{{workflow.parameters.processed-key-suffix}}"
                - name: p_out_bucket
                  value: "{{workflow.parameters.processed-bucket}}"
                - name: p_out_key
                  value: "{{workflow.parameters.input-key}}{{workflow.parameters.processed-key-suffix}}"
                - name: p_sensitive_col
                  value: "{{workflow.parameters.sensitive-features}}"
                - name: p_target_col
                  value: "{{workflow.parameters.target-column}}"

          - name: final-bias-check
            template: check-bias
            dependencies: [reduction]
            when: "{{tasks.initial-bias-check.outputs.parameters.bias-status}} != 'Passed'"
            arguments:
              parameters:
                - name: p_in_bucket
                  value: "{{workflow.parameters.processed-bucket}}"
                - name: p_in_key
                  value: "{{workflow.parameters.input-key}}{{workflow.parameters.processed-key-suffix}}"
                - name: p_out_bucket
                  value: "{{workflow.parameters.reports-bucket}}"
                - name: p_report_key
                  value: "{{workflow.parameters.input-key}}{{workflow.parameters.reduction-bias-report-key-suffix}}"
                - name: p_sensitive_col
                  value: "{{workflow.parameters.sensitive-features}}"
                - name: p_group_value
                  value: "{{workflow.parameters.group-value}}"
                - name: p_target_col
                  value: "{{workflow.parameters.target-column}}"
                - name: p_positive_target_value
                  value: "{{workflow.parameters.positive-target-value}}"
                - name: p_bias_threshold
                  value: "{{workflow.parameters.bias-threshold}}"

          - name: split
            template: split-data
            dependencies: [final-bias-check]
            arguments:
              parameters:
                - name: in_bucket
                  value: "{{workflow.parameters.processed-bucket}}"
                - name: in_key
                  value: "{{workflow.parameters.input-key}}{{workflow.parameters.processed-key-suffix}}"
                - name: out_bucket
                  value: "{{workflow.parameters.feature-bucket}}"
                - name: train_key
                  value: "{{workflow.parameters.input-key}}{{workflow.parameters.train-key-suffix}}"
                - name: test_key
                  value: "{{workflow.parameters.input-key}}{{workflow.parameters.test-key-suffix}}"
                - name: val_key
                  value: "{{workflow.parameters.input-key}}{{workflow.parameters.val-key-suffix}}"
                - name: target_col
                  value: "{{workflow.parameters.target-column}}"
